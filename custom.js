// Generated by CoffeeScript 1.9.1
(function() {
  var Suggestion, SuggestionView, SuggestionViews, Suggestions, filterData, hashedURLMap, inWhiteList, user_id;

  hashedURLMap = (function() {
    var hashCode, index, isReservedKey, j, key, map, prepareURL, ref, reservedKeys, splitArr, stripParameters, strippedKey;
    map = {};
    reservedKeys = ["user_id", "timeDataSent", "version"];
    isReservedKey = function(key) {
      var i, j, ref;
      for (i = j = 0, ref = reservedKeys.length - 1; j <= ref; i = j += 1) {
        if (key === reservedKeys[i]) {
          return true;
        }
      }
      return false;
    };
    hashCode = function(str) {
      var char, hash, i, j, ref;
      hash = 0;
      if (str.length === 0) {
        return hash;
      }
      for (i = j = 0, ref = str.length - 1; j <= ref; i = j += 1) {
        char = str.charCodeAt(i);
        hash = ((hash << 5) - hash) + char;
        hash = hash & hash;
      }
      return hash;
    };
    stripParameters = function(url) {
      return url.split("?")[0];
    };
    prepareURL = function(url) {
      var afterDomain, afterProtocol, afterSlashArr, finalURL, hash, hashedAfterDomain, hashedDomain;
      url = stripParameters(url);
      url = new URL(url);
      afterDomain = url.href.split(url.host)[1];
      hashedAfterDomain = hashCode(afterDomain);
      hashedDomain = hashCode(url.host);
      afterProtocol = url.href.split(url.protocol + "//")[1];
      afterSlashArr = afterProtocol.split("/");
      hash = "/";
      if (afterSlashArr[1]) {
        hash += hashCode(afterSlashArr.slice(1).join('/'));
      }
      finalURL = url.protocol + "//" + hashedDomain + "/" + hashedAfterDomain;
      return finalURL;
    };
    for (index = j = 0, ref = localStorage.length - 1; j <= ref; index = j += 1) {
      key = localStorage.key(index);
      if (isReservedKey(key)) {
        continue;
      }
      if (key.indexOf("chrome") === 0 || key.indexOf("file") === 0 || key.indexOf("about") === 0) {
        continue;
      }
      splitArr = key.split("/");
      splitArr.splice(-1, 1);
      strippedKey = splitArr.join("/");
      map[prepareURL(strippedKey)] = strippedKey;
    }
    return map;
  })();

  Suggestion = Backbone.Model.extend({
    initialize: function() {
      return console.log("Suggestion created!");
    }
  });

  Suggestions = Backbone.Collection.extend({
    model: Suggestion,
    id: localStorage.user_id,
    initialize: function(data) {
      var currValues, i, j, ref, results, tempSuggestion;
      results = [];
      for (i = j = 0, ref = data.length - 1; j <= ref; i = j += 1) {
        currValues = data[i];
        tempSuggestion = new Suggestion(currValues);
        results.push(this.add(tempSuggestion));
      }
      return results;
    }
  });

  SuggestionView = Backbone.View.extend({
    model: Suggestion,
    className: 'suggestion well',
    initialize: function() {
      this.recommend_yes_clicked = false;
      return this.shared_yes_clicked = false;
    },
    template: _.template($("#suggestion_template").html()),
    events: {
      'click .recommend_question .yes': 'recommendYesClicked',
      'click .recommend_question .no': 'recommendNoClicked',
      'click .shared_question .yes': 'sharedYesClicked',
      'click .shared_question .no': 'sharedNoClicked'
    },
    recommendYesClicked: function() {
      console.log("Yes clicked!");
      this.sendResponse("recommend", "yes");
      this.$el.find(".recommend_question .yes").addClass("active");
      this.$el.find(".recommend_question .yes span").show();
      if (!this.recommend_yes_clicked) {
        this.$el.find(".recommend_question .no").removeClass("active");
        this.$el.find(".recommend_question .no span").hide();
      }
      this.recommend_yes_clicked = true;
      return this.$el.find(".shared_question").show();
    },
    recommendNoClicked: function() {
      console.log("No clicked!");
      this.sendResponse("recommend", "no");
      this.$el.find(".recommend_question .no").addClass("active");
      this.$el.find(".recommend_question .no span").show();
      if (this.recommend_yes_clicked) {
        this.$el.find(".recommend_question .yes").removeClass("active");
        this.$el.find(".recommend_question .yes span").hide();
      }
      this.recommend_yes_clicked = false;
      return this.$el.find(".shared_question").hide();
    },
    sharedYesClicked: function() {
      console.log("Yes shared clicked");
      this.sendResponse("shared", "yes");
      this.$el.find(".shared_question .yes").addClass("active");
      this.$el.find(".shared_question .yes span").show();
      if (!this.shared_yes_clicked) {
        this.$el.find(".shared_question .no").removeClass("active");
        this.$el.find(".shared_question .no span").hide();
      }
      return this.shared_yes_clicked = true;
    },
    sharedNoClicked: function() {
      console.log("No shared clicked");
      this.sendResponse("shared", "no");
      this.$el.find(".shared_question .no").addClass("active");
      this.$el.find(".shared_question .no span").show();
      if (this.shared_yes_clicked) {
        this.$el.find(".shared_question .yes").removeClass("active");
        this.$el.find(".shared_question .yes span").hide();
      }
      return this.shared_yes_clicked = false;
    },
    sendResponse: function(question, answer) {
      var data;
      data = this.model.attributes;
      data.question = question;
      data.answer = answer;
      return $.post("http://104.131.5.95:9292/feedback", data).done(function(response) {
        console.log("got response from feedback");
        return console.log(response);
      });
    },
    render: function() {
      this.$el.html(this.template(this.model.attributes));
      return this;
    }
  });

  SuggestionViews = Backbone.View.extend({
    el: "#suggestions_container",
    render: function() {
      var index, j, ref, results, suggestionModel, tempSuggestionView;
      console.log("suggestion views render called");
      results = [];
      for (index = j = 0, ref = this.collection.length - 1; j <= ref; index = j += 1) {
        suggestionModel = this.collection.at(index);
        console.log("in each loop");
        tempSuggestionView = new SuggestionView({
          model: suggestionModel
        });
        results.push(this.$el.append(tempSuggestionView.render().el));
      }
      return results;
    }
  });

  user_id = localStorage["user_id"];

  inWhiteList = function(elem, whitelist) {
    var i, j, ref;
    for (i = j = 0, ref = whitelist.length - 1; j <= ref; i = j += 1) {
      if (whitelist[i] === elem) {
        return true;
      }
    }
    return false;
  };

  filterData = function(data, whitelistSites) {
    var entry, filteredData, hostname, i, j, passChecks, ref, url, urlObj;
    filteredData = [];
    for (i = j = 0, ref = data.length - 1; j <= ref; i = j += 1) {
      entry = data[i];
      url = hashedURLMap[entry["url"]];
      entry["actualURL"] = url;
      urlObj = new URL(url);
      hostname = urlObj.host;
      if (hostname.startsWith("www.")) {
        hostname = hostname.substring(4);
      }
      passChecks = inWhiteList(hostname, whitelistSites) && urlObj.pathname !== "/";
      if (passChecks) {
        filteredData.push(entry);
      }
    }
    return filteredData;
  };

  $.ajax("http://104.131.5.95:9292/suggested_sites/" + user_id).done(function(data) {
    return $.ajax("http://104.131.5.95:9292/whitelist_sites").done(function(siteData) {
      var daCollection, daViews, filteredData, parsedData, whitelistSites;
      $("#loader").hide();
      whitelistSites = JSON.parse(siteData);
      parsedData = JSON.parse(data);
      filteredData = filterData(parsedData, whitelistSites);
      daCollection = new Suggestions(filteredData);
      daViews = new SuggestionViews({
        collection: daCollection
      });
      return daViews.render();
    });
  });

}).call(this);
